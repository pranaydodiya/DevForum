
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export interface Badge {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: 'milestone' | 'language' | 'activity' | 'special';
  requirement: number;
  earnedAt?: string;
}

export interface SkillTag {
  tag: string;
  level: 'beginner' | 'intermediate' | 'advanced' | 'expert';
  endorsements: number;
  codeContributions: number;
  autoGenerated: boolean;
}

export interface ReputationActivity {
  type: 'upvote' | 'accepted_answer' | 'helpful_comment' | 'streak' | 'rare_topic' | 'challenge_win';
  points: number;
  timestamp: string;
  description: string;
}

export interface Challenge {
  id: string;
  title: string;
  description: string;
  difficulty: 'easy' | 'medium' | 'hard';
  language: string;
  startDate: string;
  endDate: string;
  submissions: ChallengeSubmission[];
  isActive: boolean;
}

export interface ChallengeSubmission {
  id: string;
  challengeId: string;
  userId: string;
  userName: string;
  code: string;
  votes: number;
  submittedAt: string;
  performance: number;
}

interface EngagementContextType {
  reputation: number;
  badges: Badge[];
  skillTags: SkillTag[];
  reputationHistory: ReputationActivity[];
  challenges: Challenge[];
  leaderboard: Array<{
    userId: string;
    userName: string;
    reputation: number;
    badges: number;
    weeklyPoints: number;
  }>;
  earnBadge: (badgeId: string) => void;
  addReputationPoints: (activity: Omit<ReputationActivity, 'timestamp'>) => void;
  endorseSkill: (skillTag: string) => void;
  submitChallenge: (challengeId: string, code: string) => void;
  voteOnSubmission: (submissionId: string, vote: 'up' | 'down') => void;
}

const EngagementContext = createContext<EngagementContextType | undefined>(undefined);

export const useEngagement = () => {
  const context = useContext(EngagementContext);
  if (context === undefined) {
    throw new Error('useEngagement must be used within an EngagementProvider');
  }
  return context;
};

interface EngagementProviderProps {
  children: ReactNode;
}

const defaultBadges: Badge[] = [
  { id: 'first-answer-python', name: 'First Answer in Python', description: 'Answered your first Python question', icon: '🐍', category: 'language', requirement: 1 },
  { id: 'hundred-upvotes', name: '100 Upvotes Milestone', description: 'Received 100 upvotes across all posts', icon: '💯', category: 'milestone', requirement: 100 },
  { id: 'weekly-top-contributor', name: 'Weekly Top Contributor', description: 'Top contributor for the week', icon: '🏆', category: 'activity', requirement: 1 },
  { id: 'streak-master', name: 'Streak Master', description: 'Maintained a 30-day activity streak', icon: '🔥', category: 'activity', requirement: 30 },
  { id: 'code-reviewer', name: 'Code Reviewer', description: 'Provided 50 helpful code reviews', icon: '👁️', category: 'special', requirement: 50 },
  { id: 'problem-solver', name: 'Problem Solver', description: 'Resolved 10 flagged difficult questions', icon: '🧩', category: 'special', requirement: 10 }
];

const defaultSkillTags: SkillTag[] = [
  { tag: 'react', level: 'advanced', endorsements: 15, codeContributions: 23, autoGenerated: true },
  { tag: 'typescript', level: 'expert', endorsements: 12, codeContributions: 18, autoGenerated: true },
  { tag: 'python', level: 'intermediate', endorsements: 8, codeContributions: 14, autoGenerated: false },
  { tag: 'node.js', level: 'advanced', endorsements: 10, codeContributions: 16, autoGenerated: true }
];

const defaultChallenges: Challenge[] = [
  {
    id: 'algo-challenge-1',
    title: 'Binary Tree Traversal',
    description: 'Implement an efficient binary tree traversal algorithm',
    difficulty: 'medium',
    language: 'javascript',
    startDate: '2024-06-14T00:00:00Z',
    endDate: '2024-06-21T23:59:59Z',
    isActive: true,
    submissions: [
      {
        id: 'sub-1',
        challengeId: 'algo-challenge-1',
        userId: '1',
        userName: 'Alex Rodriguez',
        code: 'function traverseBinaryTree(root) {\n  // Implementation here\n  return result;\n}',
        votes: 8,
        submittedAt: '2024-06-14T10:30:00Z',
        performance: 92
      }
    ]
  }
];

export const EngagementProvider = ({ children }: EngagementProviderProps) => {
  const [reputation, setReputation] = useState(1250);
  const [badges, setBadges] = useState<Badge[]>(defaultBadges);
  const [skillTags, setSkillTags] = useState<SkillTag[]>(defaultSkillTags);
  const [reputationHistory, setReputationHistory] = useState<ReputationActivity[]>([]);
  const [challenges, setChallenges] = useState<Challenge[]>(defaultChallenges);
  const [leaderboard] = useState([
    { userId: '1', userName: 'Emma Davis', reputation: 2890, badges: 8, weeklyPoints: 340 },
    { userId: '2', userName: 'Sophie Martin', reputation: 3200, badges: 12, weeklyPoints: 290 },
    { userId: '3', userName: 'Anna Thompson', reputation: 2800, badges: 7, weeklyPoints: 280 },
    { userId: 'current', userName: 'You', reputation: 1250, badges: 3, weeklyPoints: 150 }
  ]);

  const earnBadge = (badgeId: string) => {
    setBadges(prev => prev.map(badge => 
      badge.id === badgeId ? { ...badge, earnedAt: new Date().toISOString() } : badge
    ));
  };

  const addReputationPoints = (activity: Omit<ReputationActivity, 'timestamp'>) => {
    const newActivity = { ...activity, timestamp: new Date().toISOString() };
    setReputationHistory(prev => [newActivity, ...prev.slice(0, 49)]);
    setReputation(prev => prev + activity.points);
  };

  const endorseSkill = (skillTag: string) => {
    setSkillTags(prev => prev.map(skill => 
      skill.tag === skillTag ? { ...skill, endorsements: skill.endorsements + 1 } : skill
    ));
  };

  const submitChallenge = (challengeId: string, code: string) => {
    const newSubmission: ChallengeSubmission = {
      id: Date.now().toString(),
      challengeId,
      userId: 'current',
      userName: 'Current User',
      code,
      votes: 0,
      submittedAt: new Date().toISOString(),
      performance: Math.floor(Math.random() * 40) + 60
    };

    setChallenges(prev => prev.map(challenge => 
      challenge.id === challengeId 
        ? { ...challenge, submissions: [...challenge.submissions, newSubmission] }
        : challenge
    ));
  };

  const voteOnSubmission = (submissionId: string, vote: 'up' | 'down') => {
    setChallenges(prev => prev.map(challenge => ({
      ...challenge,
      submissions: challenge.submissions.map(sub => 
        sub.id === submissionId 
          ? { ...sub, votes: sub.votes + (vote === 'up' ? 1 : -1) }
          : sub
      )
    })));
  };

  return (
    <EngagementContext.Provider value={{
      reputation,
      badges,
      skillTags,
      reputationHistory,
      challenges,
      leaderboard,
      earnBadge,
      addReputationPoints,
      endorseSkill,
      submitChallenge,
      voteOnSubmission
    }}>
      {children}
    </EngagementContext.Provider>
  );
};
